{"title":"Averaging Dice Rolls","description":"In this demo, we use a Metrics object to keep a count (and a rolling average) of\nthe values in each Cell in a Store. We roll a dice 48 times and keep track of\nthe average.","html":"","css":".roll {\n  display: inline-block;\n  font-size: 3rem;\n  padding: 0 1rem;\n  line-height: 3rem;\n}\n\n@font-face {\n  font-family: Inter;\n  src: url(https://tinybase.org/fonts/inter.woff2) format(\"woff2\");\n}\n\nbody {\n  font-family: Inter, sans-serif;\n  letter-spacing: -0.04rem;\n  margin: 0;\n}\np {\n  margin: 1rem;\n}","js":"const {MetricView, Provider, TableView, useCell} = TinyBaseUiReact;\nconst {createMetrics, createStore} = TinyBase;\nconst store = createStore();\n\nconst metrics = createMetrics(store)\n  .setMetricDefinition('average', 'rolls', 'avg', 'result')\n  .setMetricDefinition('count', 'rolls', 'sum');\n\nconst Roll = ({tableId, rowId}) => (\n  <span className=\"roll\">\n    {String.fromCharCode(9855 + useCell(tableId, rowId, 'result'))}\n  </span>\n);\n\nReactDOM.createRoot(document.body).render(\n  <Provider store={store} metrics={metrics}>\n    <p>\n      Count: <MetricView metricId=\"count\" />\n      <br />\n      Average: <MetricView metricId=\"average\" />\n    </p>\n    <TableView tableId=\"rolls\" rowComponent={Roll} />\n  </Provider>,\n);\n\nlet rolls = 0;\nconst interval = setInterval(() => {\n  if (rolls++ == 48) {\n    clearInterval(interval);\n  } else {\n    store.addRow('rolls', {\n      result: Math.ceil(Math.random() * 6),\n    });\n  }\n}, 500);","css_pre_processor":"less","js_pre_processor":"typescript","js_external":"https://beta.tinybase.org/umd/react.production.min.js;https://beta.tinybase.org/umd/react-dom.production.min.js;https://beta.tinybase.org/umd/tinybase.js;https://beta.tinybase.org/umd/ui-react.js","editors":"012","tags":["tinybase"]}