{"title":"Movie Database","description":"In this demo, we build an app that showcases the relational query capabilities\nof TinyBase v2.0, joining together information about movies, directors, and\nactors.","html":"","css":"#loading {\n  animation: spin 1s infinite linear;\n  height: 2rem;\n  margin: 40vh auto;\n  width: 2rem;\n  &::before {\n    content: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"2rem\" viewBox=\"0 0 100 100\"><path d=\"M50 10A40 40 0 1 1 10 50\" stroke=\"black\" fill=\"none\" stroke-width=\"4\" /></svg>');\n  }\n}\n\n@keyframes spin {\n  from {\n    transform: rotate(0);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\nnav {\n  background: #eee;\n  display: flex;\n  a {\n    flex: 1;\n    padding: 0.25rem;\n    text-align: center;\n    &.current {\n      background: #ddd;\n      font-weight: 600;\n    }\n  }\n}\n\nmain {\n  padding: 0.5rem;\n}\n\ntable {\n  border-collapse: collapse;\n  font-size: inherit;\n  line-height: inherit;\n  margin-top: 0.5rem;\n  table-layout: fixed;\n  width: 100%;\n  caption {\n    text-align: left;\n    button {\n      border: 0;\n      margin-right: 0.25rem;\n    }\n  }\n  th,\n  td {\n    padding: 0.25rem 0.5rem 0.25rem 0;\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n  }\n  th {\n    border: solid #ddd;\n    border-width: 1px 0;\n    cursor: pointer;\n    text-align: left;\n    width: 20%;\n    &:nth-child(1) {\n      width: 40%;\n    }\n  }\n  td {\n    border-bottom: 1px solid #eee;\n  }\n}\n\nimg {\n  width: 1rem;\n  height: 1.5rem;\n  object-fit: cover;\n  vertical-align: top;\n  margin: 0 0.25rem 0 0;\n  &.large {\n    width: 4rem;\n    height: 6rem;\n    margin: 0 0.5rem 1rem 0;\n    object-fit: contain;\n    float: left;\n    + ul + * {\n      clear: both;\n    }\n  }\n}\n\n@font-face {\n  font-family: Inter;\n  src: url(https://tinybase.org/fonts/inter.woff2) format(\"woff2\");\n}\n\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  user-select: none;\n  font-family: Inter, sans-serif;\n  letter-spacing: -0.04rem;\n  font-size: 0.8rem;\n  line-height: 1.5rem;\n  margin: 0;\n  color: #333;\n}\n\nh1 {\n  margin: 0 0 1rem;\n}\n\nh2 {\n  margin: 1.5rem 0 0.5rem;\n}\n\nul {\n  padding-left: 0;\n}\n\nli {\n  display: block;\n  padding-bottom: 0.25rem;\n}\n\na {\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  cursor: pointer;\n  max-width: 100%;\n  display: inline-block;\n  vertical-align: top;\n  color: #000;\n  &:hover {\n    text-decoration: underline;\n  }\n}\n\np {\n  line-height: 1.2rem;\n}","js":"const {createQueries, createStore} = TinyBase;\nconst {\n  CellView,\n  Provider,\n  ResultCellView,\n  useCell,\n  useCreateQueries,\n  useCreateStore,\n  useQueries,\n  useResultCell,\n  useResultRowIds,\n  useSetValuesCallback,\n  useValues,\n} = TinyBaseUiReact;\nconst {createElement, useMemo, useState} = React;\nconst {ResultSortedTableInHtmlTable, StoreInspector} = TinyBaseUiReactDomDebug;\n\nconst App = () => {\n  const store = useCreateStore(createStore);\n\n  const viewStore = useCreateStore(() =>\n    createStore().setValues({currentSection: 'movies'}),\n  );\n\n  const queries = useCreateQueries(store, createAndInitQueries, []);\n  // ...\n\n  // ...\n  const [isLoading, setIsLoading] = useState(true);\n  useMemo(async () => {\n    await loadStore(store);\n    setIsLoading(false);\n  }, []);\n\n  return (\n    <Provider store={store} storesById={{viewStore}} queries={queries}>\n      <Header />\n      {isLoading ? <Loading /> : <Body />}\n      <StoreInspector />\n    </Provider>\n  );\n};\n\naddEventListener('load', () =>\n  ReactDOM.createRoot(document.body).render(<App />),\n);\n\nconst Loading = () => <div id=\"loading\" />;\n\nconst MoviesSection = ({detailId}) =>\n  detailId == null ? <MoviesOverview /> : <MovieDetail movieId={detailId} />;\n\nconst YearsSection = ({detailId}) =>\n  detailId == null ? <YearsOverview /> : <YearDetail year={detailId} />;\n\nconst GenresSection = ({detailId}) =>\n  detailId == null ? <GenresOverview /> : <GenreDetail genreId={detailId} />;\n\nconst PeopleSection = ({detailId}) =>\n  detailId == null ? <PeopleOverview /> : <PersonDetail personId={detailId} />;\n\nconst SECTIONS = {\n  movies: ['Movies', MoviesSection],\n  years: ['Years', YearsSection],\n  genres: ['Genres', GenresSection],\n  people: ['People', PeopleSection],\n};\n\nconst useRoute = () => useValues('viewStore');\nconst useSetRouteCallback = (currentSection, currentDetailId) =>\n  useSetValuesCallback(\n    () => ({currentSection, currentDetailId}),\n    [currentSection, currentDetailId],\n    'viewStore',\n  );\n\nconst Header = () => {\n  const {currentSection} = useRoute();\n  return (\n    <nav>\n      {Object.entries(SECTIONS).map(([section, [title]]) => (\n        <a\n          className={currentSection == section ? 'current' : ''}\n          onClick={useSetRouteCallback(section, null)}\n        >\n          {title}\n        </a>\n      ))}\n    </nav>\n  );\n};\n\nconst Body = () => {\n  const {currentSection, currentDetailId} = useRoute();\n  if (SECTIONS[currentSection] != null) {\n    const [, Section] = SECTIONS[currentSection];\n    return (\n      <main>\n        <Section detailId={currentDetailId} />\n      </main>\n    );\n  }\n  return null;\n};\n\nconst NUMERIC = /^[\\d\\.]+$/;\n\nconst loadTable = async (store, tableId) => {\n  const rows = (\n    await (await fetch(`https://tinybase.org/assets/${tableId}.tsv`)).text()\n  ).split('\\n');\n  const cellIds = rows.shift().split('\\t');\n  rows.forEach((row) => {\n    const cells = row.split('\\t');\n    if (cells.length == cellIds.length) {\n      const rowId = cells.shift();\n      cells.forEach((cell, c) => {\n        if (cell != '') {\n          if (NUMERIC.test(cell)) {\n            cell = parseFloat(cell);\n          }\n          store.setCell(tableId, rowId, cellIds[c + 1], cell);\n        }\n      });\n    }\n  });\n};\n\nconst loadStore = async (store) => {\n  store.startTransaction();\n  await Promise.all(\n    ['movies', 'genres', 'people', 'cast'].map((tableId) =>\n      loadTable(store, tableId),\n    ),\n  );\n  store.finishTransaction();\n};\n\nconst queryMovieBasics = ({select, join}) => {\n  select((_, movieId) => movieId).as('movieId');\n  select('name').as('movieName');\n  select('image').as('movieImage');\n  select('year');\n  select('rating');\n  select('genreId');\n  select('genres', 'name').as('genreName');\n  join('genres', 'genreId');\n};\n\nconst createAndInitQueries = (store) => {\n  const queries = createQueries(store);\n  // ...\n\n  // ...\n  queries.setQueryDefinition('movies', 'movies', ({select, join}) => {\n    queryMovieBasics({select, join});\n    select('overview');\n    select('directorId');\n    select('directors', 'name').as('directorName');\n    select('directors', 'image').as('directorImage');\n    join('people', 'directorId').as('directors');\n    [1, 2, 3].forEach((billing) => {\n      const castJoin = `cast${billing}`;\n      join('cast', (_, movieId) => `${movieId}/${billing}`).as(castJoin);\n      select(castJoin, 'castId').as(`castId${billing}`);\n      const actorJoin = `actors${billing}`;\n      join('people', castJoin, 'castId').as(actorJoin);\n      select(actorJoin, 'name').as(`castName${billing}`);\n      select(actorJoin, 'image').as(`castImage${billing}`);\n    });\n  });\n  // ...\n\n  // ...\n  queries.setQueryDefinition('years', 'movies', ({select, group}) => {\n    select('year');\n    select((_, rowId) => rowId).as('movieId');\n    group('movieId', 'count').as('movieCount');\n  });\n\n  queries.setQueryDefinition('genres', 'movies', ({select, join, group}) => {\n    select('genreId');\n    select((_, rowId) => rowId).as('movieId');\n    join('genres', 'genreId');\n    select('genres', 'name').as('genreName');\n    group('movieId', 'count').as('movieCount');\n  });\n\n  queries.setQueryDefinition('directors', 'movies', ({select, join, group}) => {\n    select('directorId');\n    select((_, rowId) => rowId).as('movieId');\n    select('people', 'name').as('directorName');\n    select('people', 'image').as('directorImage');\n    select('people', 'gender');\n    select('people', 'popularity');\n    join('people', 'directorId');\n    group('movieId', 'count').as('movieCount');\n  });\n\n  queries.setQueryDefinition('cast', 'cast', ({select, join, group}) => {\n    select('castId');\n    select('movieId');\n    select('people', 'name').as('castName');\n    select('people', 'image').as('castImage');\n    select('people', 'gender');\n    select('people', 'popularity');\n    join('people', 'castId');\n    group('movieId', 'count').as('movieCount');\n  });\n\n  return queries;\n};\n\nconst MovieLink = ({queryId, rowId}) => {\n  const movieId = useResultCell(queryId, rowId, 'movieId');\n  return (\n    <a onClick={useSetRouteCallback('movies', movieId)}>\n      <ImageFromQuery queryId={queryId} rowId={rowId} cellId=\"movieImage\" />\n      <ResultCellView queryId={queryId} rowId={rowId} cellId=\"movieName\" />\n    </a>\n  );\n};\n\nconst YearLink = ({queryId, rowId}) => {\n  const year = useResultCell(queryId, rowId, 'year');\n  return (\n    <a onClick={useSetRouteCallback('years', year)}>\n      <ResultCellView queryId={queryId} rowId={rowId} cellId=\"year\" />\n    </a>\n  );\n};\n\nconst GenreLink = ({queryId, rowId}) => {\n  const genreId = useResultCell(queryId, rowId, 'genreId');\n  return (\n    <a onClick={useSetRouteCallback('genres', genreId)}>\n      <ResultCellView queryId={queryId} rowId={rowId} cellId=\"genreName\" />\n    </a>\n  );\n};\n\nconst DirectorLink = ({queryId, rowId}) => {\n  const personId = useResultCell(queryId, rowId, 'directorId');\n  return (\n    <a onClick={useSetRouteCallback('people', personId)}>\n      <ImageFromQuery queryId={queryId} rowId={rowId} cellId=\"directorImage\" />\n      <ResultCellView queryId={queryId} rowId={rowId} cellId=\"directorName\" />\n    </a>\n  );\n};\n\nconst CastLink = ({queryId, rowId, billing = ''}) => {\n  const personId = useResultCell(queryId, rowId, `castId${billing}`);\n  return personId == null ? null : (\n    <a onClick={useSetRouteCallback('people', personId)}>\n      <ImageFromQuery\n        queryId={queryId}\n        rowId={rowId}\n        cellId={`castImage${billing}`}\n      />\n      <ResultCellView\n        queryId={queryId}\n        rowId={rowId}\n        cellId={`castName${billing}`}\n      />\n    </a>\n  );\n};\n\nconst GenderFromQuery = ({queryId, rowId}) =>\n  genderString(useResultCell(queryId, rowId, 'gender'));\n\nconst GenderFromTable = ({tableId, rowId}) =>\n  genderString(useCell(tableId, rowId, 'gender'));\n\nconst genderString = (genderId) => {\n  switch (genderId) {\n    case 1:\n      return 'Female';\n    case 2:\n      return 'Male';\n    case 3:\n      return 'Non-binary';\n    default:\n      return 'Unknown';\n  }\n};\n\nconst ImageFromQuery = ({queryId, rowId, cellId, isLarge}) => (\n  <Image imageFile={useResultCell(queryId, rowId, cellId)} isLarge={isLarge} />\n);\n\nconst ImageFromTable = ({tableId, rowId, cellId, isLarge}) => (\n  <Image imageFile={useCell(tableId, rowId, cellId)} isLarge={isLarge} />\n);\n\nconst Image = ({imageFile, isLarge}) => (\n  <img\n    src={`https://image.tmdb.org/t/p/w${isLarge ? 92 : 45}${imageFile}`}\n    className={isLarge ? 'large' : ''}\n  />\n);\n\nconst Page = ({title, children}) => (\n  <>\n    <h1>{title}</h1>\n    {children}\n  </>\n);\n\nconst MoviesOverview = () => (\n  <Page title=\"Rated movies\">\n    <ResultSortedTableInHtmlTable\n      queryId=\"movies\"\n      customCells={customCellsForMoviesOverview}\n      cellId=\"rating\"\n      descending={true}\n      limit={20}\n      sortOnClick={true}\n      paginator={true}\n      idColumn={false}\n    />\n  </Page>\n);\n\nconst customCellsForMoviesOverview = {\n  movieName: {label: 'Movie', component: MovieLink},\n  year: {label: 'Year', component: YearLink},\n  rating: {label: 'Rating'},\n  genreName: {label: 'Genre', component: GenreLink},\n};\n\nconst YearsOverview = () => (\n  <Page title=\"Years\">\n    <ResultSortedTableInHtmlTable\n      queryId=\"years\"\n      customCells={customCellsForYearsOverview}\n      cellId=\"year\"\n      limit={20}\n      descending={true}\n      sortOnClick={true}\n      paginator={true}\n      idColumn={false}\n    />\n  </Page>\n);\n\nconst customCellsForYearsOverview = {\n  year: {label: 'Year', component: YearLink},\n  movieCount: {label: 'Rated movies'},\n};\n\nconst GenresOverview = () => (\n  <Page title=\"Genres\">\n    <ResultSortedTableInHtmlTable\n      queryId=\"genres\"\n      customCells={customCellsForGenresOverview}\n      cellId=\"movieCount\"\n      descending={true}\n      limit={20}\n      sortOnClick={true}\n      paginator={true}\n      idColumn={false}\n    />\n  </Page>\n);\n\nconst customCellsForGenresOverview = {\n  genreName: {label: 'Genre', component: GenreLink},\n  movieCount: {label: 'Rated movies'},\n};\n\nconst PeopleOverview = () => (\n  <Page title=\"People\">\n    <h2>Directors</h2>\n    <ResultSortedTableInHtmlTable\n      queryId=\"directors\"\n      customCells={customCellsForDirectorsOverview}\n      cellId=\"popularity\"\n      descending={true}\n      limit={20}\n      sortOnClick={true}\n      paginator={true}\n      idColumn={false}\n    />\n    <h2>Cast</h2>\n    <ResultSortedTableInHtmlTable\n      queryId=\"cast\"\n      customCells={customCellsForCastOverview}\n      cellId=\"popularity\"\n      descending={true}\n      limit={20}\n      sortOnClick={true}\n      paginator={true}\n      idColumn={false}\n    />\n  </Page>\n);\n\nconst customCellsForDirectorsOverview = {\n  directorName: {label: 'Director', component: DirectorLink},\n  gender: {label: 'Gender', component: GenderFromQuery},\n  popularity: {label: 'Popularity'},\n  movieCount: {label: 'Rated movies'},\n};\n\nconst customCellsForCastOverview = {\n  castName: {label: 'Cast', component: CastLink},\n  gender: {label: 'Gender', component: GenderFromQuery},\n  popularity: {label: 'Popularity'},\n  movieCount: {label: 'Rated movies'},\n};\n\nconst MovieDetail = ({movieId}) => {\n  const props = {queryId: 'movies', rowId: movieId};\n  const name = useResultCell('movies', movieId, 'movieName');\n  return name == null ? null : (\n    <Page title={name}>\n      <ImageFromQuery {...props} cellId=\"movieImage\" isLarge={true} />\n      <ul>\n        <li>\n          Year: <YearLink {...props} />\n        </li>\n        <li>\n          Genre: <GenreLink {...props} />\n        </li>\n        <li>\n          Rating: <ResultCellView {...props} cellId=\"rating\" />\n        </li>\n      </ul>\n      <p>\n        <ResultCellView {...props} cellId=\"overview\" />\n      </p>\n      <h2>Credits</h2>\n      <ul>\n        <li>\n          <DirectorLink {...props} />, director\n        </li>\n        <li>\n          <CastLink {...props} billing={1} />\n        </li>\n        <li>\n          <CastLink {...props} billing={2} />\n        </li>\n        <li>\n          <CastLink {...props} billing={3} />\n        </li>\n      </ul>\n    </Page>\n  );\n};\n\nconst YearDetail = ({year}) => {\n  const queries = useQueries();\n  useMemo(\n    () =>\n      queries.setQueryDefinition(\n        'moviesInYear',\n        'movies',\n        ({select, join, where}) => {\n          queryMovieBasics({select, join});\n          where('year', year);\n        },\n      ),\n    [year],\n  );\n  return (\n    <Page title={`Movies from ${year}`}>\n      <ResultSortedTableInHtmlTable\n        queryId=\"moviesInYear\"\n        customCells={customCellsForMoviesInYear}\n        cellId=\"rating\"\n        descending={true}\n        limit={20}\n        sortOnClick={true}\n        paginator={true}\n        idColumn={false}\n      />\n    </Page>\n  );\n};\n\nconst customCellsForMoviesInYear = {\n  movieName: {label: 'Movie', component: MovieLink},\n  rating: {label: 'Rating'},\n  genreName: {label: 'Genre', component: GenreLink},\n};\n\nconst GenreDetail = ({genreId}) => {\n  const queries = useQueries();\n  useMemo(\n    () =>\n      queries.setQueryDefinition(\n        'moviesInGenre',\n        'movies',\n        ({select, join, where}) => {\n          queryMovieBasics({select, join});\n          where('genreId', genreId);\n        },\n      ),\n    [genreId],\n  );\n  const name = useCell('genres', genreId, 'name');\n  return name == null ? null : (\n    <Page title={`${name} movies`}>\n      <ResultSortedTableInHtmlTable\n        queryId=\"moviesInGenre\"\n        customCells={customCellsForMoviesInGenre}\n        cellId=\"rating\"\n        descending={true}\n        limit={20}\n        sortOnClick={true}\n        paginator={true}\n        idColumn={false}\n      />\n    </Page>\n  );\n};\n\nconst customCellsForMoviesInGenre = {\n  movieName: {label: 'Movie', component: MovieLink},\n  year: {label: 'Year', component: YearLink},\n  rating: {label: 'Rating'},\n};\n\nconst PersonDetail = ({personId}) => {\n  const queries = useQueries();\n  useMemo(\n    () =>\n      queries\n        .setQueryDefinition(\n          'moviesWithDirector',\n          'movies',\n          ({select, join, where}) => {\n            queryMovieBasics({select, join});\n            where('directorId', personId);\n          },\n        )\n        .setQueryDefinition(\n          'moviesWithCast',\n          'cast',\n          ({select, join, where}) => {\n            select('movieId');\n            select('movies', 'name').as('movieName');\n            select('movies', 'image').as('movieImage');\n            select('movies', 'year');\n            select('movies', 'rating');\n            select('movies', 'genreId');\n            select('genres', 'name').as('genreName');\n            join('movies', 'movieId');\n            join('genres', 'movies', 'genreId');\n            where('castId', personId);\n          },\n        ),\n    [personId],\n  );\n\n  const props = {tableId: 'people', rowId: personId};\n  const name = useCell('people', personId, 'name');\n  const died = useCell('people', personId, 'died');\n  const moviesWithDirector = useResultRowIds('moviesWithDirector');\n  const moviesWithCast = useResultRowIds('moviesWithCast');\n\n  return name == null ? null : (\n    <Page title={name}>\n      <ImageFromTable {...props} cellId=\"image\" isLarge={true} />\n      <ul>\n        <li>\n          Gender: <GenderFromTable {...props} />\n        </li>\n        <li>\n          Born: <CellView {...props} cellId=\"born\" />\n          {died && (\n            <>\n              ; died: <CellView {...props} cellId=\"died\" />\n            </>\n          )}\n        </li>\n        <li>\n          Popularity: <CellView {...props} cellId=\"popularity\" />\n        </li>\n      </ul>\n      <p>\n        <CellView {...props} cellId=\"biography\" />\n      </p>\n\n      {moviesWithDirector.length == 0 ? null : (\n        <>\n          <h2>As director:</h2>\n          <ResultSortedTableInHtmlTable\n            queryId=\"moviesWithDirector\"\n            customCells={customCellsForMoviesWithPeople}\n            cellId=\"rating\"\n            descending={true}\n            limit={20}\n            sortOnClick={true}\n            paginator={true}\n            idColumn={false}\n          />\n        </>\n      )}\n\n      {moviesWithCast.length == 0 ? null : (\n        <>\n          <h2>As cast:</h2>\n          <ResultSortedTableInHtmlTable\n            queryId=\"moviesWithCast\"\n            customCells={customCellsForMoviesWithPeople}\n            cellId=\"rating\"\n            descending={true}\n            limit={20}\n            sortOnClick={true}\n            paginator={true}\n            idColumn={false}\n          />\n        </>\n      )}\n    </Page>\n  );\n};\n\nconst customCellsForMoviesWithPeople = {\n  movieName: {label: 'Movie', component: MovieLink},\n  year: {label: 'Year', component: YearLink},\n  rating: {label: 'Rating'},\n  genreName: {label: 'Genre', component: GenreLink},\n};","css_pre_processor":"less","js_pre_processor":"typescript","js_external":"https://beta.tinybase.org/umd/react.production.min.js;https://beta.tinybase.org/umd/react-dom.production.min.js;https://beta.tinybase.org/umd/tinybase.js;https://beta.tinybase.org/umd/ui-react.js;https://beta.tinybase.org/umd/ui-react-dom-debug.js","editors":"012","tags":["tinybase"]}