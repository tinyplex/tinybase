{"title":"Countries","description":"In this demo, we build a simple app that uses React and a simple Store object to\nload and display country data.","html":"","css":"@accentColor: #d81b60;\n@spacing: 0.5rem;\n@border: 1px solid #ccc;\n@font-face {\n  font-family: Inter;\n  src: url(https://tinybase.org/fonts/inter.woff2) format(\"woff2\");\n}\nbody {\n  box-sizing: border-box;\n  display: flex;\n  font-family: Inter, sans-serif;\n  letter-spacing: -0.04rem;\n  margin: 0;\n  height: 100vh;\n  padding: @spacing * 2;\n  text-align: center;\n}\n\n#filters {\n  overflow-y: scroll;\n  border-right: @border;\n  margin-right: @spacing;\n  padding-right: @spacing;\n  .filter {\n    cursor: pointer;\n    &.current {\n      color: @accentColor;\n    }\n    .label,\n    .count {\n      display: inline-block;\n      width: 2em;\n    }\n    .count {\n      color: #777;\n      font-size: 0.8rem;\n      text-align: left;\n    }\n  }\n}\n\n#countries {\n  flex: 1;\n  display: grid;\n  grid-template-columns: repeat(4, minmax(0, 1fr));\n  grid-auto-rows: max-content;\n  gap: @spacing;\n  overflow-y: scroll;\n  .country {\n    background: #fff;\n    border: @border;\n    padding: @spacing;\n    position: relative;\n    height: fit-content;\n    .star {\n      cursor: pointer;\n      display: inline;\n      left: 8px;\n      position: absolute;\n      top: 5px;\n      user-select: none;\n    }\n    .flag {\n      font-size: 5rem;\n      line-height: 1em;\n    }\n    .name {\n      overflow: hidden;\n      text-overflow: ellipsis;\n      vertical-align: top;\n      white-space: nowrap;\n    }\n  }\n}","js":"const {\n  createLocalPersister,\n  createRemotePersister,\n  createSessionPersister,\n  createIndexes,\n  createStore,\n  defaultSorter,\n} = TinyBase;\nconst {\n  CellView,\n  IndexView,\n  Provider,\n  SliceView,\n  useCell,\n  useCreateIndexes,\n  useCreatePersister,\n  useCreateStore,\n  useDelCellCallback,\n  useSetCellCallback,\n  useSetRowCallback,\n  useSetValuesCallback,\n  useSliceRowIds,\n  useValues,\n} = TinyBaseUiReact;\nconst {useCallback} = React;\n\nconst STAR = '\\u2605';\nconst UNSTAR = '\\u2606';\n\nconst App = () => {\n  const countryStore = useCreateStore(() =>\n    createStore().setTablesSchema({\n      countries: {emoji: {type: 'string'}, name: {type: 'string'}},\n    }),\n  );\n  useCreatePersister(\n    countryStore,\n    (store) =>\n      createRemotePersister(\n        store,\n        'https://tinybase.org/assets/countries.json',\n      ),\n    [],\n    async (persister) => await persister.load(),\n  );\n\n  const starStore = useCreateStore(() =>\n    createStore().setTablesSchema({countries: {star: {type: 'boolean'}}}),\n  );\n  useCreatePersister(\n    starStore,\n    (store) => createLocalPersister(store, 'countries/starStore'),\n    [],\n    async (persister) => {\n      await persister.startAutoLoad({\n        countries: {\n          GB: {star: true},\n          NZ: {star: true},\n          AU: {star: true},\n          SE: {star: true},\n          IE: {star: true},\n          IN: {star: true},\n          BZ: {star: true},\n          US: {star: true},\n        },\n      });\n      await persister.startAutoSave();\n    },\n  );\n\n  const viewStore = useCreateStore(createStore);\n  useCreatePersister(\n    viewStore,\n    (store) => createSessionPersister(store, 'countries/viewStore'),\n    [],\n    async (persister) => {\n      await persister.startAutoLoad(\n        {},\n        {\n          indexes: 'countryIndexes',\n          indexId: 'firstLetter',\n          sliceId: 'A',\n        },\n      );\n      await persister.startAutoSave();\n    },\n  );\n  // ...\n\n  // ...\n  const countryIndexes = useCreateIndexes(countryStore, (store) =>\n    createIndexes(store).setIndexDefinition(\n      'firstLetter',\n      'countries',\n      (getCell) => getCell('name')[0],\n      'name',\n      defaultSorter,\n    ),\n  );\n\n  const starIndexes = useCreateIndexes(starStore, (store) =>\n    createIndexes(store).setIndexDefinition('star', 'countries', 'star'),\n  );\n  // ...\n\n  // ...\n  return (\n    <Provider\n      storesById={{countryStore, starStore, viewStore}}\n      indexesById={{countryIndexes, starIndexes}}\n    >\n      <Filters />\n      <Countries />\n    </Provider>\n  );\n};\n\nwindow.addEventListener('load', () =>\n  ReactDOM.createRoot(document.body).render(<App />),\n);\n\nconst useCurrentSlice = () => useValues('viewStore');\n\nconst useSetCurrentSlice = (indexes, indexId, sliceId) =>\n  useSetValuesCallback(\n    () => ({indexes, indexId, sliceId}),\n    [indexes, indexId, sliceId],\n    'viewStore',\n  );\n\nconst Filters = () => {\n  const {\n    indexes: currentIndexes,\n    indexId: currentIndexId,\n    sliceId: currentSliceId,\n  } = useCurrentSlice();\n\n  return (\n    <div id=\"filters\">\n      <Filter\n        indexes=\"starIndexes\"\n        indexId=\"star\"\n        sliceId=\"true\"\n        label={STAR}\n        selected={\n          currentIndexes == 'starIndexes' &&\n          currentIndexId == 'star' &&\n          currentSliceId == 'true'\n        }\n      />\n      <IndexView\n        indexId=\"firstLetter\"\n        indexes=\"countryIndexes\"\n        sliceComponent={Filter}\n        getSliceComponentProps={useCallback(\n          (sliceId) => ({\n            selected:\n              currentIndexes == 'countryIndexes' &&\n              currentIndexId == 'firstLetter' &&\n              currentSliceId == sliceId,\n          }),\n          [currentIndexes, currentIndexId, currentSliceId],\n        )}\n      />\n    </div>\n  );\n};\n\nconst Filter = ({\n  indexes = 'countryIndexes',\n  indexId,\n  sliceId,\n  selected,\n  label = sliceId,\n}) => {\n  const handleClick = useSetCurrentSlice(indexes, indexId, sliceId);\n  const className = 'filter' + (selected ? ' current' : '');\n  const rowIdCount = useSliceRowIds(indexId, sliceId, indexes).length;\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <span className=\"label\">{label}</span>\n      <span className=\"count\">{rowIdCount}</span>\n    </div>\n  );\n};\n\nconst Countries = () => (\n  <div id=\"countries\">\n    <SliceView {...useCurrentSlice()} rowComponent={Country} />\n  </div>\n);\n\nconst Country = (props) => {\n  const {tableId, rowId} = props;\n  const star = useCell(tableId, rowId, 'star', 'starStore');\n  const setStar = useSetCellCallback(\n    tableId,\n    rowId,\n    'star',\n    () => true,\n    [],\n    'starStore',\n  );\n  const setUnstar = useDelCellCallback(\n    tableId,\n    rowId,\n    'star',\n    true,\n    'starStore',\n  );\n  const handleClick = star ? setUnstar : setStar;\n\n  return (\n    <div className=\"country\">\n      <div className=\"star\" onClick={handleClick}>\n        {star ? STAR : UNSTAR}\n      </div>\n      <div className=\"flag\">\n        <CellView {...props} cellId=\"emoji\" store=\"countryStore\" />\n      </div>\n      <div className=\"name\">\n        <CellView {...props} cellId=\"name\" store=\"countryStore\" />\n      </div>\n    </div>\n  );\n};","css_pre_processor":"less","js_pre_processor":"typescript","js_external":"https://beta.tinybase.org/umd/react.production.min.js;https://beta.tinybase.org/umd/react-dom.production.min.js;https://beta.tinybase.org/umd/tinybase.js;https://beta.tinybase.org/umd/ui-react.js","editors":"012","tags":["tinybase"]}