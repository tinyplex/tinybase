{"title":"Word Frequencies","description":"In this demo, we load the list of the 10,000 most common words in English, index\nthem for a fast search experience, and showcase TinyBase v2.1's ability to\nregister a Row in multiple Slice arrays of an Index.","html":"","css":"input {\n  border: 0;\n  border-bottom: 1px solid #999;\n  display: block;\n  font: inherit;\n  letter-spacing: inherit;\n  font-weight: 600;\n  margin: 1rem auto;\n  outline: 0;\n  padding: 0;\n  width: 20rem;\n}\n\n.result {\n  display: block;\n  width: 20rem;\n  margin: 0.25rem auto;\n  small {\n    float: right;\n    color: #777;\n    font-size: 0.7rem;\n  }\n}\n\n#loading {\n  animation: spin 1s infinite linear;\n  height: 2rem;\n  margin: 40vh auto;\n  width: 2rem;\n  &::before {\n    content: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"2rem\" viewBox=\"0 0 100 100\"><path d=\"M50 10A40 40 0 1 1 10 50\" stroke=\"black\" fill=\"none\" stroke-width=\"4\" /></svg>');\n  }\n}\n\n@keyframes spin {\n  from {\n    transform: rotate(0);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@font-face {\n  font-family: Inter;\n  src: url(https://tinybase.org/fonts/inter.woff2) format(\"woff2\");\n}\n\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  color: #333;\n  font-family: Inter, sans-serif;\n  letter-spacing: -0.04rem;\n  font-size: 1rem;\n  line-height: 1.2rem;\n  margin: 0;\n  user-select: none;\n}","js":"const {createIndexes, createStore} = TinyBase;\nconst {Provider, useCreateIndexes, useCreateStore, useRow, useSliceRowIds} =\n  TinyBaseUiReact;\nconst {useCallback, useMemo, useState} = React;\n\nconst loadWords = async (store) => {\n  const words = (\n    await (await fetch(`https://tinybase.org/assets/words.tsv`)).text()\n  ).split('\\n');\n  store.transaction(() =>\n    words.forEach((row, rowId) => {\n      const [word, perMillion] = row.split('\\t');\n      store.addRow('words', {rank: rowId + 1, word, perMillion});\n    }),\n  );\n};\n\nconst indexWords = (store) =>\n  createIndexes(store).setIndexDefinition('stems', 'words', (getCell) => {\n    const word = getCell('word');\n    const stems = [];\n    for (let l = 0; l <= word.length; l++) {\n      stems.push(word.substring(0, l));\n    }\n    return stems;\n  });\n\nconst App = () => {\n  const store = useCreateStore(createStore);\n  const indexes = useCreateIndexes(store, indexWords);\n  // ...\n\n  // ...\n  const [isLoading, setIsLoading] = useState(true);\n  useMemo(async () => {\n    await loadWords(store);\n    setIsLoading(false);\n  }, []);\n\n  const [stem, setStem] = useState('');\n  return (\n    <Provider store={store} indexes={indexes}>\n      {isLoading ? (\n        <Loading />\n      ) : (\n        <>\n          <Input stem={stem} onChange={setStem} />\n          <Results stem={stem} />\n        </>\n      )}\n    </Provider>\n  );\n};\n\naddEventListener('load', () =>\n  ReactDOM.createRoot(document.body).render(<App />),\n);\n\nconst Input = ({stem, onChange}) => (\n  <input\n    value={stem}\n    onChange={useCallback(({target: {value}}) => onChange(value), [])}\n    placeholder=\"Search for a word\"\n    autoFocus={true}\n    spellCheck={false}\n  />\n);\n\nconst Results = ({stem}) => {\n  const resultRowIds = useSliceRowIds('stems', stem.toLowerCase());\n  return (\n    resultRowIds.length > 0 &&\n    resultRowIds\n      .slice(0, 14)\n      .map((rowId) => <Result rowId={rowId} stemLength={stem.length} />)\n  );\n};\n\nconst Result = ({rowId, stemLength}) => {\n  const {rank, word, perMillion} = useRow('words', rowId);\n  return (\n    <div className=\"result\">\n      <b>{word.substring(0, stemLength)}</b>\n      {word.substring(stemLength)}\n      <small>\n        <b>\n          {rank}\n          {suffix(rank)}\n        </b>\n        , {frequency(perMillion)}\n      </small>\n    </div>\n  );\n};\n\nconst suffix = (rank) => {\n  switch (rank % 100) {\n    case 11:\n    case 12:\n    case 13:\n      return 'th';\n  }\n  switch (rank % 10) {\n    case 1:\n      return 'st';\n    case 2:\n      return 'nd';\n    case 3:\n      return 'rd';\n    default:\n      return 'th';\n  }\n};\n\nconst frequency = (perMillion) => {\n  if (perMillion < 10) {\n    return 'rare';\n  }\n  return (perMillion / 10000).toFixed(3) + '%';\n};\n\nconst Loading = () => <div id=\"loading\" />;","css_pre_processor":"less","js_pre_processor":"typescript","js_external":"https://beta.tinybase.org/umd/react.production.min.js;https://beta.tinybase.org/umd/react-dom.production.min.js;https://beta.tinybase.org/umd/tinybase.js;https://beta.tinybase.org/umd/ui-react.js","editors":"012","tags":["tinybase"]}