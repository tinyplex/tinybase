{"title":"Todo App v6 (collaboration)","description":"In this version of the Todo app, we use a Synchronizer to make the application\ncollaborative.","html":"","css":"@accentColor: #d81b60;\n@spacing: 0.5rem;\n@border: 1px solid #ccc;\n@font-face {\n  font-family: Inter;\n  src: url(https://tinybase.org/fonts/inter.woff2) format(\"woff2\");\n}\n\nbody {\n  display: grid;\n  grid-template-columns: 35% minmax(0, 1fr);\n  grid-template-rows: auto auto 1fr;\n  box-sizing: border-box;\n  font-family: Inter, sans-serif;\n  letter-spacing: -0.04rem;\n  grid-gap: @spacing * 2 @spacing;\n  margin: 0;\n  min-height: 100vh;\n  padding: @spacing * 2;\n  * {\n    box-sizing: border-box;\n    outline-color: @accentColor;\n  }\n}\n\n#newTodo {\n  border: @border;\n  display: block;\n  font: inherit;\n  letter-spacing: inherit;\n  padding: @spacing;\n  width: 100%;\n}\n\n#todos {\n  grid-column: 2;\n  grid-row: 2 / span 2;\n  margin: 0;\n  padding: 0;\n}\n\n#todos .todo {\n  background: #fff;\n  border: @border;\n  display: flex;\n  margin-bottom: @spacing;\n  padding: @spacing;\n  .text {\n    cursor: pointer;\n    flex: 1;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    user-select: none;\n    white-space: nowrap;\n    &::before {\n      content: \"\\1F7E0\";\n      padding: 0 0.5rem 0 0.25rem;\n    }\n    &.done {\n      color: #ccc;\n      &::before {\n        content: \"\\2705\";\n      }\n    }\n  }\n}\n\n#types {\n  margin: 0;\n}\n\n#types .type {\n  cursor: pointer;\n  margin-bottom: @spacing;\n  user-select: none;\n  &.current {\n    color: @accentColor;\n  }\n}\n\n#todos .todo .type {\n  border: none;\n  color: #777;\n  font: inherit;\n  font-size: 0.8rem;\n  margin-top: 0.1rem;\n}\n\n#undoRedo {\n  grid-column: 1;\n  grid-row: 3;\n  #undo,\n  #redo {\n    cursor: pointer;\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    user-select: none;\n    &::before {\n      padding-right: 0.5rem;\n      vertical-align: middle;\n    }\n    &.disabled {\n      cursor: default;\n      opacity: 0.3;\n    }\n  }\n  #undo::before {\n    content: \"\\21A9\";\n  }\n  #redo::before {\n    content: \"\\21AA\";\n  }\n}\n\n#share {\n  a,\n  span {\n    background: #eee;\n    border: @border;\n    color: #000;\n    cursor: pointer;\n    display: inline-block;\n    padding: 0.5rem 1rem;\n    text-align: center;\n    text-decoration: none;\n    width: 10rem;\n  }\n  a {\n    border-color: @accentColor;\n    background: #ddd;\n  }\n}","js":"const {\n  createCheckpoints,\n  createIndexes,\n  createMergeableStore,\n  createMetrics,\n  createStore,\n  getUniqueId,\n} = TinyBase;\nconst {createLocalPersister, createSessionPersister} = TinyBasePersisterBrowser;\nconst {createWsSynchronizer} = TinyBaseSynchronizerWsClient;\nconst {\n  CellView,\n  CheckpointView,\n  Provider,\n  SliceView,\n  useAddRowCallback,\n  useCell,\n  useCheckpoints,\n  useCreateCheckpoints,\n  useCreateIndexes,\n  useCreateMergeableStore,\n  useCreateMetrics,\n  useCreatePersister,\n  useCreateStore,\n  useCreateSynchronizer,\n  useMetric,\n  useRedoInformation,\n  useRow,\n  useSetCellCallback,\n  useSetCheckpointCallback,\n  useSetValueCallback,\n  useUndoInformation,\n  useValue,\n} = TinyBaseUiReact;\nconst {useCallback, useState} = React;\nconst {StoreInspector} = TinyBaseUiReactDomDebug;\n\nconst TYPES = ['Home', 'Work', 'Archived'];\nconst SCHEMA = {\n  todos: {\n    text: {type: 'string'},\n    done: {type: 'boolean', default: false},\n    type: {type: 'string', default: 'Home', allow: TYPES},\n  },\n};\nconst INITIAL_TODOS = {\n  todos: {\n    0: {text: 'Clean the floor', type: 'Home'},\n    1: {text: 'Install TinyBase', type: 'Work'},\n    2: {text: 'Book holiday', type: 'Archived'},\n  },\n};\n\nconst App = () => {\n  const store = useCreateMergeableStore(() =>\n    createMergeableStore().setTablesSchema(SCHEMA),\n  );\n  const checkpoints = useCreateCheckpoints(store, createCheckpoints);\n  useCreatePersister(\n    store,\n    (store) => createLocalPersister(store, 'todos/mergeableStore'),\n    [],\n    async (persister) => {\n      await persister.startAutoLoad([INITIAL_TODOS]);\n      checkpoints?.clear();\n      await persister.startAutoSave();\n    },\n    [checkpoints],\n  );\n  const [serverPathId, createServerPathId] = useServerPathId();\n  useCreateSynchronizer(\n    store,\n    async (store) => {\n      if (serverPathId) {\n        const synchronizer = await createWsSynchronizer(\n          store,\n          new WebSocket(WS_SERVER + serverPathId),\n        );\n        await synchronizer.startSync();\n        checkpoints?.clear();\n        return synchronizer;\n      }\n    },\n    [serverPathId, checkpoints],\n  );\n  const viewStore = useCreateStore(() =>\n    createStore().setValuesSchema({type: {type: 'string', default: 'Home'}}),\n  );\n  useCreatePersister(\n    viewStore,\n    (store) => createSessionPersister(store, 'todos/viewStore'),\n    [],\n    async (persister) => {\n      await persister.startAutoLoad();\n      await persister.startAutoSave();\n    },\n  );\n  const indexes = useCreateIndexes(store, (store) =>\n    createIndexes(store).setIndexDefinition('types', 'todos', 'type'),\n  );\n  const metrics = useCreateMetrics(store, (store) => {\n    const metrics = createMetrics(store);\n    metrics.setMetricDefinition('pending', 'todos', 'sum', (getCell) =>\n      !getCell('done') ? 1 : 0,\n    );\n    TYPES.forEach((type) => {\n      metrics.setMetricDefinition(type, 'todos', 'sum', (getCell) =>\n        getCell('type') == type && !getCell('done') ? 1 : 0,\n      );\n    });\n    return metrics;\n  });\n\n  return (\n    <Provider\n      store={store}\n      storesById={{viewStore}}\n      indexes={indexes}\n      metrics={metrics}\n      checkpoints={checkpoints}\n    >\n      <Share\n        serverPathId={serverPathId}\n        createServerPathId={createServerPathId}\n      />\n      <NewTodo />\n      <Types />\n      <Todos />\n      <Title />\n      <StoreInspector />\n    </Provider>\n  );\n};\n\nwindow.addEventListener('load', () =>\n  ReactDOM.createRoot(document.body).render(<App />),\n);\n\nconst Title = () => {\n  const pending = useMetric('pending');\n\n  return pending > 0 ? `Todo: ${pending}` : 'All done!';\n};\n\nconst NewTodo = () => {\n  const [text, setText] = useState('');\n  const type = useValue('type', 'viewStore');\n  const handleChange = useCallback(({target: {value}}) => setText(value), []);\n  const addCheckpoint = useSetCheckpointCallback(\n    () => `adding '${text}'`,\n    [text],\n  );\n  const handleKeyDown = useAddRowCallback(\n    'todos',\n    ({which, target: {value: text}}) =>\n      which == 13 && text != '' ? {text, type} : null,\n    [type],\n    undefined,\n    () => {\n      setText('');\n      addCheckpoint();\n    },\n    [setText, addCheckpoint],\n  );\n\n  return (\n    <input\n      id=\"newTodo\"\n      onChange={handleChange}\n      onKeyDown={handleKeyDown}\n      placeholder=\"New Todo\"\n      value={text}\n    />\n  );\n};\n\nconst Todos = () => (\n  <ul id=\"todos\">\n    <SliceView\n      indexId=\"types\"\n      sliceId={useValue('type', 'viewStore')}\n      rowComponent={Todo}\n    />\n  </ul>\n);\n\nconst Todo = (props) => (\n  <li className=\"todo\">\n    <TodoText {...props} />\n    <TodoType {...props} />\n  </li>\n);\n\nconst TodoText = ({tableId, rowId}) => {\n  const {done, text} = useRow(tableId, rowId);\n  const className = 'text' + (done ? ' done' : '');\n  const setCell = useSetCellCallback(tableId, rowId, 'done', () => !done, [\n    done,\n  ]);\n  const addCheckpoint = useSetCheckpointCallback(\n    () => `${done ? 'resuming' : 'completing'} '${text}'`,\n    [done],\n  );\n  const handleClick = useCallback(() => {\n    setCell();\n    addCheckpoint();\n  }, [setCell, addCheckpoint]);\n\n  return (\n    <span className={className} onClick={handleClick}>\n      <CellView tableId={tableId} rowId={rowId} cellId=\"text\" />\n    </span>\n  );\n};\n\nconst Types = () => (\n  <ul id=\"types\">\n    {TYPES.map((type) => (\n      <Type key={type} type={type} />\n    ))}\n  </ul>\n);\n\nconst Type = ({type}) => {\n  const pending = useMetric(type);\n  const currentType = useValue('type', 'viewStore');\n  const handleClick = useSetValueCallback(\n    'type',\n    () => type,\n    [type],\n    'viewStore',\n  );\n  const className = 'type' + (type == currentType ? ' current' : '');\n\n  return (\n    <li className={className} onClick={handleClick}>\n      {type}\n      {pending > 0 ? ` (${pending})` : ''}\n    </li>\n  );\n};\n\nconst TodoType = ({tableId, rowId}) => {\n  const type = useCell(tableId, rowId, 'type');\n  const checkpoints = useCheckpoints();\n  const handleChange = useSetCellCallback(\n    tableId,\n    rowId,\n    'type',\n    ({target: {value}}) => value,\n    [],\n    undefined,\n    (_store, type) => checkpoints.addCheckpoint(`changing to '${type}'`),\n    [checkpoints],\n  );\n\n  return (\n    <select className=\"type\" onChange={handleChange} value={type}>\n      {TYPES.map((type) => (\n        <option>{type}</option>\n      ))}\n    </select>\n  );\n};\n\nconst UndoRedo = () => {\n  const [canUndo, handleUndo, , undoLabel] = useUndoInformation();\n  const undo = canUndo ? (\n    <div id=\"undo\" onClick={handleUndo}>\n      undo {undoLabel}\n    </div>\n  ) : (\n    <div id=\"undo\" className=\"disabled\" />\n  );\n\n  const [canRedo, handleRedo, , redoLabel] = useRedoInformation();\n  const redo = canRedo ? (\n    <div id=\"redo\" onClick={handleRedo}>\n      redo {redoLabel}\n    </div>\n  ) : (\n    <div id=\"redo\" className=\"disabled\" />\n  );\n\n  return (\n    <div id=\"undoRedo\">\n      {undo}\n      {redo}\n    </div>\n  );\n};\n\nconst WS_SERVER = 'wss://todo.demo.tinybase.org/';\n\nconst useServerPathId = () => {\n  const [serverPathId, setServerPathId] = useState(\n    parent.location.search.substring(1),\n  );\n  return [\n    serverPathId,\n    useCallback(() => {\n      const newServerPathId = getUniqueId();\n      parent.history.replaceState(null, null, '?' + newServerPathId);\n      setServerPathId(newServerPathId);\n    }, []),\n  ];\n};\n\nconst Share = ({serverPathId, createServerPathId}) => (\n  <div id=\"share\">\n    {serverPathId ? (\n      <a href={'?' + serverPathId} target=\"_blank\">\n        &#128279; Share link\n      </a>\n    ) : (\n      <span onClick={createServerPathId}>&#128228; Start sharing</span>\n    )}\n  </div>\n);","css_pre_processor":"less","js_pre_processor":"typescript","js_external":"https://beta.tinybase.org/umd/react.production.min.js;https://beta.tinybase.org/umd/react-dom.production.min.js;https://beta.tinybase.org/umd/tinybase.js;https://beta.tinybase.org/umd/persister-browser.js;https://beta.tinybase.org/umd/synchronizer-ws-client.js;https://beta.tinybase.org/umd/ui-react.js;https://beta.tinybase.org/umd/ui-react-dom-debug.js","editors":"012","tags":["tinybase"]}