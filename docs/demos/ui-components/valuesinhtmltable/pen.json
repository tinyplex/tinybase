{"title":"<ValuesInHtmlTable />","description":"In this first demo, we set up a Store containing some sample data, and showcase\nthe ValuesInHtmlTable component.","html":"","css":"#loading {\n  animation: spin 1s infinite linear;\n  height: 2rem;\n  margin: 40vh auto;\n  width: 2rem;\n  &::before {\n    content: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"2rem\" viewBox=\"0 0 100 100\"><path d=\"M50 10A40 40 0 1 1 10 50\" stroke=\"black\" fill=\"none\" stroke-width=\"4\" /></svg>');\n  }\n}\n\n@keyframes spin {\n  from {\n    transform: rotate(0);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@font-face {\n  font-family: Inter;\n  src: url(https://tinybase.org/fonts/inter.woff2) format(\"woff2\");\n}\n\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  align-items: flex-start;\n  color: #333;\n  display: flex;\n  font-family: Inter, sans-serif;\n  font-size: 0.8rem;\n  min-height: 100vh;\n  justify-content: space-around;\n  letter-spacing: -0.04rem;\n  line-height: 1.5rem;\n  margin: 0;\n  user-select: none;\n}\n\ntable {\n  background: white;\n  border-collapse: collapse;\n  box-shadow: 0 0 1rem #0004;\n  font-size: inherit;\n  line-height: inherit;\n  margin: 2rem;\n  table-layout: fixed;\n  th,\n  td {\n    overflow: hidden;\n    padding: 0.25rem 0.5rem;\n    white-space: nowrap;\n    border-width: 1px 0;\n    border-style: solid;\n    border-color: #eee;\n    text-align: left;\n  }\n  thead th {\n    border-bottom-color: #ccc;\n  }\n  button,\n  input {\n    border: 1px solid #ccc;\n  }\n}","js":"const {createStore} = TinyBase;\nconst {Provider, useCreateStore} = TinyBaseUiReact;\nconst {ValuesInHtmlTable} = TinyBaseUiReactDom;\nconst {createElement, useMemo, useState} = React;\n\nconst App = () => {\n  const store = useCreateStore(createStore);\n  const [isLoading, setIsLoading] = useState(true);\n  useMemo(() => {\n    loadValues(store);\n    setIsLoading(false);\n  }, []);\n\n  return (\n    <Provider store={store}>{isLoading ? <Loading /> : <Body />}</Provider>\n  );\n};\n\naddEventListener('load', () =>\n  ReactDOM.createRoot(document.body).render(<App />),\n);\n\nconst loadValues = (store) => {\n  store\n    .startTransaction()\n    .setValue('username', 'John Appleseed')\n    .setValue('email address', 'john.appleseed@example.com')\n    .setValue('dark mode', true)\n    .setValue('font size', 14)\n    .finishTransaction();\n};\n\nconst Loading = () => <div id=\"loading\" />;\n\nconst Body = () => {\n  return (\n    <>\n      <ValuesInHtmlTable />\n\n      <ValuesInHtmlTable headerRow={false} idColumn={false} />\n    </>\n  );\n};","css_pre_processor":"less","js_pre_processor":"typescript","js_external":"https://tinybase.org/umd/react.production.min.js;https://tinybase.org/umd/react-dom.production.min.js;https://tinybase.org/umd/tinybase.js;https://tinybase.org/umd/ui-react.js;https://tinybase.org/umd/ui-react-dom.js","editors":"012","tags":["tinybase"]}