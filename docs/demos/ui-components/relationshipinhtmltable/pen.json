{"title":"<RelationshipInHtmlTable />","description":"In this demo, we showcase the RelationshipInHtmlTable component, a way to\ndisplay the two Tables linked together by a Relationship.","html":"","css":"#loading {\n  animation: spin 1s infinite linear;\n  height: 2rem;\n  margin: 40vh auto;\n  width: 2rem;\n  &::before {\n    content: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"2rem\" viewBox=\"0 0 100 100\"><path d=\"M50 10A40 40 0 1 1 10 50\" stroke=\"black\" fill=\"none\" stroke-width=\"4\" /></svg>');\n  }\n}\n\n@keyframes spin {\n  from {\n    transform: rotate(0);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@font-face {\n  font-family: Inter;\n  src: url(https://tinybase.org/fonts/inter.woff2) format(\"woff2\");\n}\n\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  align-items: flex-start;\n  color: #333;\n  display: flex;\n  font-family: Inter, sans-serif;\n  font-size: 0.8rem;\n  min-height: 100vh;\n  justify-content: space-around;\n  letter-spacing: -0.04rem;\n  line-height: 1.5rem;\n  margin: 0;\n  user-select: none;\n}\n\ntable {\n  background: white;\n  border-collapse: collapse;\n  box-shadow: 0 0 1rem #0004;\n  font-size: inherit;\n  line-height: inherit;\n  margin: 2rem;\n  table-layout: fixed;\n  th,\n  td {\n    overflow: hidden;\n    padding: 0.25rem 0.5rem;\n    white-space: nowrap;\n    border-width: 1px 0;\n    border-style: solid;\n    border-color: #eee;\n    text-align: left;\n  }\n  thead th {\n    border-bottom-color: #ccc;\n  }\n  button,\n  input {\n    border: 1px solid #ccc;\n  }\n}\n\na {\n  color: inherit;\n}","js":"const {createRelationships, createStore} = TinyBase;\nconst {CellView, Provider, useCell, useCreateRelationships, useCreateStore} =\n  TinyBaseUiReact;\nconst {RelationshipInHtmlTable} = TinyBaseUiReactDom;\nconst {createElement, useMemo, useState} = React;\n\nconst App = () => {\n  const store = useCreateStore(createStore);\n  const relationships = useCreateRelationships(store, (store) =>\n    createRelationships(store).setRelationshipDefinition(\n      'genresMetadata',\n      'genres',\n      'metadata',\n      (_, rowId) => 'genre' + rowId,\n    ),\n  );\n  const [isLoading, setIsLoading] = useState(true);\n  useMemo(async () => {\n    await loadTable(store, 'genres');\n    store.setTable('metadata', {\n      genre1: {text: 'Dramatic movies to make you think', popularity: 6},\n      genre2: {text: 'These ones make you laugh', popularity: 7},\n      genre3: {text: 'Fun for all the family', popularity: 8},\n      genre4: {text: 'For the romantics at heart', popularity: 5},\n      genre5: {text: 'From cartoons to CGI', popularity: 5},\n      genre6: {text: 'Escape to another world', popularity: 4},\n      genre7: {text: 'Tales of the American West', popularity: 3},\n      genre8: {text: 'Stay on the edge of your seat', popularity: 6},\n      genre9: {text: 'For your inner explorer', popularity: 7},\n      genre10: {text: 'Fast-paced action from start to finish', popularity: 8},\n      genre11: {text: 'Jump scares to give you nightmares', popularity: 6},\n      genre12: {text: 'Murders and mysteries', popularity: 5},\n      genre14: {text: 'Take a step back in time', popularity: 3},\n      genre15: {text: 'A glimpse of the future', popularity: 8},\n      genre16: {text: 'Who did it?', popularity: 5},\n    });\n    setIsLoading(false);\n  }, []);\n\n  return (\n    <Provider store={store} relationships={relationships}>\n      {isLoading ? <Loading /> : <Body />}\n    </Provider>\n  );\n};\n\naddEventListener('load', () =>\n  ReactDOM.createRoot(document.body).render(<App />),\n);\n\nconst loadValues = (store) => {\n  store\n    .startTransaction()\n    .setValue('username', 'John Appleseed')\n    .setValue('email address', 'john.appleseed@example.com')\n    .setValue('dark mode', true)\n    .setValue('font size', 14)\n    .finishTransaction();\n};\n\nconst Loading = () => <div id=\"loading\" />;\n\nconst Body = () => {\n  return (\n    <RelationshipInHtmlTable\n      relationshipId=\"genresMetadata\"\n      customCells={customRelationshipCells}\n      idColumn={false}\n    />\n  );\n};\n\nconst NUMERIC = /^[\\d\\.]+$/;\n\nconst loadTable = async (store, tableId) => {\n  store.startTransaction();\n  const rows = (\n    await (await fetch(`https://tinybase.org/assets/${tableId}.tsv`)).text()\n  ).split('\\n');\n  const cellIds = rows.shift().split('\\t');\n  rows.forEach((row) => {\n    const cells = row.split('\\t');\n    if (cells.length == cellIds.length) {\n      const rowId = cells.shift();\n      cells.forEach((cell, c) => {\n        if (cell != '') {\n          if (NUMERIC.test(cell)) {\n            cell = parseFloat(cell);\n          }\n          store.setCell(tableId, rowId, cellIds[c + 1], cell);\n        }\n      });\n    }\n  });\n  store.finishTransaction();\n};\n\nconst DictionaryCell = ({tableId, rowId, cellId, store}) => {\n  const word = useCell(tableId, rowId, cellId, store);\n  return (\n    <a\n      href={'https://www.merriam-webster.com/dictionary/' + word}\n      target=\"_blank\"\n    >\n      {word}\n    </a>\n  );\n};\n\nconst customCells = {name: {label: 'Name', component: DictionaryCell}};\n\nconst Popularity = (props) => (\n  <b>\n    <CellView {...props} />\n  </b>\n);\n\nconst customRelationshipCells = {\n  'genres.name': 'Genre',\n  'metadata.popularity': {\n    label: 'Popularity',\n    component: Popularity,\n  },\n  'metadata.text': 'Description',\n};","css_pre_processor":"less","js_pre_processor":"typescript","js_external":"https://tinybase.org/umd/react.production.min.js;https://tinybase.org/umd/react-dom.production.min.js;https://tinybase.org/umd/tinybase.js;https://tinybase.org/umd/ui-react.js;https://tinybase.org/umd/ui-react-dom.js","editors":"012","tags":["tinybase"]}