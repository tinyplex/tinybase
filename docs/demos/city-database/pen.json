{"title":"City Database","description":"In this demo, we build an app that loads over 140,000 records to push the size\nand performance limits of TinyBase.","html":"","css":"#loading {\n  animation: spin 1s infinite linear;\n  height: 2rem;\n  margin: 40vh auto;\n  width: 2rem;\n  &::before {\n    content: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"2rem\" viewBox=\"0 0 100 100\"><path d=\"M50 10A40 40 0 1 1 10 50\" stroke=\"black\" fill=\"none\" stroke-width=\"4\" /></svg>');\n  }\n}\n\n@keyframes spin {\n  from {\n    transform: rotate(0);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\nmain {\n  padding: 0.5rem;\n}\n\nbutton {\n  border: 0;\n  cursor: pointer;\n  height: 1rem;\n  padding: 0;\n  vertical-align: text-top;\n  width: 1rem;\n  &.prev {\n    margin-left: 0.5rem;\n    &::before {\n      content: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"1rem\" viewBox=\"0 0 100 100\" fill=\"black\"><path d=\"M65 20v60l-30-30z\" /></svg>');\n    }\n  }\n  &.next {\n    margin-right: 0.5rem;\n    &::before {\n      content: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"1rem\" viewBox=\"0 0 100 100\" fill=\"black\"><path d=\"M35 20v60l30-30z\" /></svg>');\n    }\n  }\n  &.disabled {\n    cursor: default;\n    opacity: 0.3;\n  }\n}\n\ntable {\n  border-collapse: collapse;\n  font-size: inherit;\n  line-height: inherit;\n  margin-top: 0.5rem;\n  table-layout: fixed;\n  width: 100%;\n  th,\n  td {\n    overflow: hidden;\n    padding: 0.15rem 0.5rem 0.15rem 0;\n    white-space: nowrap;\n  }\n  th {\n    border: solid #ddd;\n    border-width: 1px 0;\n    cursor: pointer;\n    text-align: left;\n    &.col0 {\n      width: 25%;\n    }\n    &.col1,\n    &.col2,\n    &.col3,\n    &.col4,\n    &.col5 {\n      width: 15%;\n    }\n  }\n  td {\n    border-bottom: 1px solid #eee;\n  }\n}\n\n@font-face {\n  font-family: Inter;\n  src: url(https://tinybase.org/fonts/inter.woff2) format(\"woff2\");\n}\n\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  user-select: none;\n  font-family: Inter, sans-serif;\n  letter-spacing: -0.04rem;\n  font-size: 0.8rem;\n  line-height: 1.5rem;\n  margin: 0;\n  color: #333;\n}","js":"const {createQueries, createStore} = TinyBase;\nconst {CellView, Provider, SortedTableView, useCreateStore, useRowIds} =\n  TinyBaseUiReact;\nconst {createElement, useCallback, useMemo, useState} = React;\n\nconst App = () => {\n  const store = useCreateStore(createStore);\n  // ...\n\n  // ...\n  const [isLoading, setIsLoading] = useState(true);\n  useMemo(async () => {\n    await loadCities(store);\n    setIsLoading(false);\n  }, []);\n\n  return (\n    <Provider store={store}>{isLoading ? <Loading /> : <Body />}</Provider>\n  );\n};\n\naddEventListener('load', () =>\n  ReactDOM.createRoot(document.body).render(<App />),\n);\n\nconst Loading = () => <div id=\"loading\" />;\n\nconst Body = () => {\n  return (\n    <main>\n      <CityTable />\n    </main>\n  );\n};\n\nconst NUMERIC = /^[\\d\\.-]+$/;\n\nconst loadCities = async (store) => {\n  const rows = (\n    await (await fetch(`https://tinybase.org/assets/cities.tsv`)).text()\n  ).split('\\n');\n  const cellIds = rows.shift().split('\\t');\n  store.transaction(() =>\n    rows.forEach((row, rowId) =>\n      row\n        .split('\\t')\n        .forEach((cell, c) =>\n          store.setCell(\n            'cities',\n            rowId,\n            cellIds[c],\n            NUMERIC.test(cell) ? parseFloat(cell) : cell,\n          ),\n        ),\n    ),\n  );\n};\n\nconst COLUMNS = [\n  'Name',\n  'Country',\n  'Population',\n  'Latitude',\n  'Longitude',\n  'Elevation',\n];\n\nconst CityTable = () => {\n  const [sortCellId, setSortCellId] = useState('Population');\n  const [descending, setDescending] = useState(true);\n  const [offset, setOffset] = useState(0);\n  const count = useRowIds('cities').length;\n  // ...\n\n  // ...\n  const LIMIT = 10;\n\n  const Pagination = useCallback(\n    () => (\n      <>\n        {count} cities\n        {offset > 0 ? (\n          <button className=\"prev\" onClick={() => setOffset(offset - LIMIT)} />\n        ) : (\n          <button className=\"prev disabled\" />\n        )}\n        {offset + LIMIT < count ? (\n          <button className=\"next\" onClick={() => setOffset(offset + LIMIT)} />\n        ) : (\n          <button className=\"next disabled\" />\n        )}\n        {offset + 1} to {Math.min(count, offset + LIMIT)}\n      </>\n    ),\n    [count, offset],\n  );\n  // ...\n\n  // ...\n  const HeadingComponent = useCallback(\n    () => (\n      <tr>\n        {COLUMNS.map((cellId, c) =>\n          cellId == sortCellId ? (\n            <th\n              onClick={() => setDescending(!descending)}\n              className={`col${c}`}\n            >\n              {descending ? '\\u2193' : '\\u2191'} {cellId}\n            </th>\n          ) : (\n            <th onClick={() => setSortCellId(cellId)} className={`col${c}`}>\n              {cellId}\n            </th>\n          ),\n        )}\n      </tr>\n    ),\n    [sortCellId, descending],\n  );\n  // ...\n\n  // ...\n  return (\n    <>\n      <Pagination />\n      <table>\n        <HeadingComponent />\n        <SortedTableView\n          tableId=\"cities\"\n          cellId={sortCellId}\n          descending={descending}\n          offset={offset}\n          limit={LIMIT}\n          rowComponent={CityRow}\n        />\n      </table>\n    </>\n  );\n};\n\n// ...\nconst CityRow = (props) => (\n  <tr>\n    {COLUMNS.map((cellId) => (\n      <td>\n        <CellView {...props} cellId={cellId} />\n      </td>\n    ))}\n  </tr>\n);","css_pre_processor":"less","js_pre_processor":"typescript","js_external":"https://beta.tinybase.org/umd/react.production.min.js;https://beta.tinybase.org/umd/react-dom.production.min.js;https://beta.tinybase.org/umd/tinybase.js;https://beta.tinybase.org/umd/ui-react.js","editors":"012","tags":["tinybase"]}