var t,e;t=this,e=function(t){"use strict";const e=t=>typeof t,a=e(""),n=t=>null==t,s=(t,e,a)=>n(t)?a?.():e(t),o=Object,r=t=>o.getPrototypeOf(t),c=o.entries,i=o.keys,d=o.freeze,y=(t,e)=>s(t,(t=>t[e])),u=(t,e)=>e in t,l=(t,e)=>(delete t[e],t),p=(t,e)=>((t,e)=>t.map(e))(c(t),(([t,a])=>e(a,t))),g=t=>i(t).length,h=t=>(t=>!n(t)&&s(r(t),(t=>t==o.prototype||n(r(t))),(()=>!0)))(t)&&0==g(t),f=t=>new Map(t),v=(t,e)=>t?.get(e),w=(t,e,a)=>{return n(a)?(s=t,o=e,s?.delete(o),t):t?.set(e,a);var s,o},A=(t,e,a,n)=>{var s,o;return s=t,o=e,s?.has(o)||w(t,e,a()),v(t,e)},C=f(),b=f(),L=t=>{return n=t?.[0],e(n)==a;var n},m=(t,e)=>[t[e].t,t[e].v],S=(t,e,a,s)=>{const o=n(e)?t:((t,e,a)=>(u(t,e)||(t[e]={}),t[e]))(t,e);let r;return p(a,((t,e)=>{s(o,e,t)&&(r=1)})),p(o,((t,e)=>{u(a,e)||(l(o,e),r=1)})),!n(e)&&h(o)&&l(t,e),r};t.createAutomergePersister=(t,e,a="tinybase",o)=>(e.change((t=>t[a]={})),((t,e,a,o,r,c,i,[y,u]=[],l=[])=>{let p,g,f,m=0,S=0;A(C,l,(()=>0)),A(b,l,(()=>[]));const[T,M,x,P]=((t,e)=>[0,e.getContent,e.getTransactionChanges,([t,e])=>!h(t)||!h(e)])(0,t),j=async t=>(2!=m&&(m=1,await D.schedule((async()=>{await t(),m=0}))),D),D={load:async(a,n)=>await j((async()=>{try{const a=await e();(T&&L(a)?t.setMergeableContent:t.setContent)(a)}catch{t.setContent([a,n])}})),startAutoLoad:async(a={},n={})=>(D.stopAutoLoad(),await D.load(a,n),S=1,f=o((async(a,n)=>{if(n){const e=n();await j((async()=>(T&&L(e)?t.applyMergeableChanges:t.applyChanges)(e)))}else await j((async()=>{try{const n=a?.()??await e();(T&&L(n)?t.setMergeableContent:t.setContent)(n)}catch(t){c?.(t)}}))})),D),stopAutoLoad:()=>(S&&(r(f),f=void 0,S=0),D),save:async t=>(1!=m&&(m=2,await D.schedule((async()=>{try{await a(M,t)}catch(t){c?.(t)}m=0}))),D),startAutoSave:async()=>(await D.stopAutoSave().save(),p=t.addDidFinishTransactionListener((()=>{const t=x();P(t)&&D.save((()=>t))})),D),stopAutoSave:()=>(s(p,t.delListener),p=void 0,D),schedule:async(...t)=>(((t,...e)=>{t.push(...e)})(v(b,l),...t),await(async()=>{if(!v(C,l)){for(w(C,l,1);!n((t=v(b,l),g=t.shift()));)try{await g()}catch(t){c?.(t)}w(C,l,0)}var t})(),D),getStore:()=>t,destroy:()=>D.stopAutoLoad().stopAutoSave(),getStats:()=>({})};return y&&(D[y]=()=>u),d(D)})(t,(async()=>{const t=await e.doc();return 2==g(t[a])?m(t,a):void 0}),(async(t,o)=>e.change((e=>((t,e,a,o)=>{((t,e)=>{h(t[e])&&(t[e]={t:{},v:{}})})(t,e);const[r,c]=m(t,e),i=()=>{d=1};let d=1;if(s(o?.(),(([t,e])=>{d=0,p(t,((t,e)=>d?0:n(t)?l(r,e):s(r[e],(e=>p(t,((t,a)=>d?0:n(t)?l(e,a):s(y(e,a),(e=>p(t,((t,a)=>n(t)?l(e,a):e[a]=t))),i)))),i))),p(e,((t,e)=>d?0:n(t)?l(c,e):c[e]=t))})),d){const[t,e]=a();S(r,void 0,t,((t,e,a)=>S(r,e,a,((t,e,a)=>S(t,e,a,((t,e,a)=>{if(y(t,e)!==a)return t[e]=a,1})))))),S(c,void 0,e,((t,e,a)=>{y(c,e)!==a&&(c[e]=a)}))}})(e,a,t,o)))),(t=>{const n=({doc:e})=>t((()=>m(e,a)));return e.on("change",n),n}),(t=>{e.removeListener("change",t)}),o,0,["getDocHandle",e]))},"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).TinyBasePersisterAutomerge={});
