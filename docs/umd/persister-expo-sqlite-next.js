var a,t;a=this,t=function(a,t){"use strict";const e=a=>typeof a,s="tinybase",n=",",i=e(""),o=(a,t)=>a.repeat(t),c=Promise,r=clearInterval,l=a=>null==a,y=(a,t,e)=>l(a)?e?.():t(a),w=a=>e(a)==i,E=(a,t,e)=>a.slice(t,e),d=a=>a.length,u=async a=>c.all(a),p="_",f="_id",T=a=>`"${a.replace(/"/g,'""')}"`,m="SELECT",v=(a,t="")=>a.join(t),A=(a,t)=>a.map(t),L=a=>0==d(a),h=(a,t)=>a.filter(t),N=(a,...t)=>a.push(...t),O=(a,t)=>a?.has(t)??!1,R=a=>[...a?.values()??[]],D=(a,t)=>a?.delete(t),S=Object,b=a=>S.getPrototypeOf(a),g=S.keys,C=S.freeze,x=(a=[])=>S.fromEntries(a),I=(...a)=>S.assign({},...a),F=(a,t)=>A(S.entries(a),(([a,e])=>t(e,a))),M=a=>S.values(a),P=a=>d(g(a)),$=a=>(a=>!l(a)&&y(b(a),(a=>a==S.prototype||l(b(a))),(()=>!0)))(a)&&0==P(a),_=a=>new Map(a),B=a=>[...a?.keys()??[]],q=(a,t)=>a?.get(t),H=(a,t)=>A([...a?.entries()??[]],(([a,e])=>t(e,a))),j=(a,t,e)=>l(e)?(D(a,t),a):a?.set(t,e),W=(a,t,e)=>(O(a,t)||j(a,t,e()),q(a,t)),Y=(a,t,e,s=j)=>(F(t,((t,s)=>e(a,s,t))),((a,t)=>{((a,t)=>{a?.forEach(t)})(a,((a,e)=>t(e)))})(a,(e=>((a,t)=>!l(((a,t)=>y(a,(a=>a[t])))(a,t)))(t,e)?0:s(a,e))),a),k=a=>new Set(Array.isArray(a)||l(a)?a:[a]),G=(a,t)=>a?.add(t),J=m+"*FROM",U="FROM pragma_table_",z="WHERE",K=(a,t,e)=>{const s=_();return[async()=>Y(s,x(await u(A(await a("SELECT name "+U+"list WHERE schema='main'AND type='table'AND name IN("+Q(t)+")ORDER BY name",t),(async({name:t})=>[t,x(A(await a(m+" name,type "+U+"info(?)",[t]),(({name:a,type:t})=>[a,t])))])))),((a,t,e)=>j(s,t,Y(W(s,t,_),e,((a,t,e)=>{e!=q(a,t)&&j(a,t,e)}),((a,t)=>j(a,t))))),((a,t)=>j(s,t))),async(t,e)=>((a,t)=>!l(q(q(s,a),t)))(t,e)?x(h(A(await a(J+T(t)),(a=>{return[a[e],(t={...a},s=e,delete t[s],t)];var t,s})),(([a,t])=>!l(a)&&!$(t)))):{},async(t,e,i,o,c,r=!1)=>{const y=k();F(i??{},(a=>A(g(a??{}),(a=>G(y,a)))));const w=R(y);if(!r&&c&&L(w)&&O(s,t))return await a("DROP TABLE"+T(t)),void j(s,t);if(L(w)||O(s,t)){const n=q(s,t),i=k(B(n));await u([...A(w,(async e=>{D(i,e)||(await a(`ALTER TABLE${T(t)}ADD${T(e)}`),j(n,e,""))})),...!r&&o?A(R(i),(async s=>{s!=e&&(await a(`ALTER TABLE${T(t)}DROP${T(s)}`),j(n,s))})):[]])}else await a(`CREATE TABLE${T(t)}(${T(e)} PRIMARY KEY ON CONFLICT REPLACE${v(A(w,(a=>n+T(a))))});`),j(s,t,_([[e,""],...A(w,(a=>[a,""]))]));if(r)l(i)?await a("DELETE FROM"+T(t)+"WHERE 1"):await u(F(i,(async(s,n)=>{l(s)?await a("DELETE FROM"+T(t)+z+T(e)+"=?",[n]):L(w)||await V(a,t,e,g(s),[n,...M(s)])})));else if(L(w))O(s,t)&&await a("DELETE FROM"+T(t)+"WHERE 1");else{const n=h(B(q(s,t)),(a=>a!=e)),o=[],c=[];F(i??{},((a,t)=>{N(o,t,...A(n,(t=>a?.[t]))),N(c,t)})),await V(a,t,e,n,o),await a("DELETE FROM"+T(t)+z+T(e)+"NOT IN("+Q(c)+")",c)}},async t=>{let s;await a("BEGIN");try{s=await t()}catch(a){e?.(a)}return await a("END"),s}]},V=async(a,t,e,s,i)=>await a("INSERT INTO"+T(t)+"("+T(e)+v(A(s,(a=>n+T(a))))+")VALUES"+E(o(`,(?${o(",?",d(s))})`,d(i)/(d(s)+1)),1)+"ON CONFLICT("+T(e)+")DO UPDATE SET"+v(A(s,(a=>T(a)+"=excluded."+T(a))),n),i),Q=a=>v(A(a,(()=>"?")),n),X=JSON.parse,Z=_(),aa=_(),ta=(a,t,e,s,n,i,[o,c]=[],r=[])=>{let w,E,d,u=0,p=0;W(Z,r,(()=>0)),W(aa,r,(()=>[]));const f=async a=>(2!=u&&(u=1,await T.schedule((async()=>{await a(),u=0}))),T),T={load:async(e,s)=>await f((async()=>{try{a.setContent(await t())}catch{a.setContent([e,s])}})),startAutoLoad:async(e={},n={})=>(T.stopAutoLoad(),await T.load(e,n),p=1,d=s((async(e,s)=>{if(s){const t=s();await f((async()=>a.setTransactionChanges(t)))}else await f((async()=>{try{a.setContent(e?.()??await t())}catch(a){i?.(a)}}))})),T),stopAutoLoad:()=>(p&&(n(d),d=void 0,p=0),T),save:async t=>(1!=u&&(u=2,await T.schedule((async()=>{try{await e(a.getContent,t)}catch(a){i?.(a)}u=0}))),T),startAutoSave:async()=>(await T.stopAutoSave().save(),w=a.addDidFinishTransactionListener(((a,t)=>{const[e,s]=t();$(e)&&$(s)||T.save((()=>[e,s]))})),T),stopAutoSave:()=>(y(w,a.delListener),w=void 0,T),schedule:async(...a)=>(N(q(aa,r),...a),await(async()=>{if(!q(Z,r)){for(j(Z,r,1);!l((a=q(aa,r),E=a.shift()));)try{await E()}catch(a){i?.(a)}j(Z,r,0)}var a})(),T),getStore:()=>a,destroy:()=>T.stopAutoLoad().stopAutoSave(),getStats:()=>({})};return o&&(T[o]=()=>c),C(T)},ea="store",sa=(a,t,e,s,n,[i],o,c)=>{const[r,l,y,w]=K(t,o,n);return ta(a,(async()=>await w((async()=>(await r(),X((await l(i,f))[p]?.[ea]??"null"))))),(async a=>await w((async()=>{var t;await r(),await y(i,f,{[p]:{[ea]:(t=a()??null,JSON.stringify(t,((a,t)=>t instanceof Map?S.fromEntries([...t]):t)))}},!0,!0)}))),e,s,n,["getDb",c],c)},na=(a,t,e,s,n,[i,o,[c,r,y]],w,E)=>{const[d,T,m,v]=K(t,w,n),A=async(a,t)=>await u(H(o,(async([e,s,n,i],o)=>{const c=a[o];t&&void 0===c||await m(e,s,c,n,i,t)}))),L=async(a,t)=>r?await m(y,f,{[p]:a},!0,!0,t):null;return ta(a,(async()=>await v((async()=>{await d();const a=await(async()=>x(h(await u(H(i,(async([a,t],e)=>[a,await T(e,t)]))),(a=>!$(a[1])))))(),t=await(async()=>c?(await T(y,f))[p]:{})();return $(a)&&l(t)?void 0:[a,t]}))),(async(a,t)=>await v((async()=>{if(await d(),l(t)){const[t,e]=a();await A(t),await L(e)}else{const[a,e]=t();await A(a,!0),await L(e,!0)}}))),e,s,n,["getDb",E],E)},ia="json",oa="autoLoadIntervalSeconds",ca="rowIdColumnName",ra="tableId",la="tableName",ya={mode:ia,[oa]:1},wa={load:0,save:0,[la]:s+"_values"},Ea=(a,t,e,s)=>{const n=_();return F(a,((a,i)=>{const o=E(M(I(t,w(a)?{[e]:a}:a)),0,P(t));l(o[0])||s(i,o[0])||j(n,i,o)})),n},da="pragma ",ua="data_version",pa="schema_version",fa=(a,t,e,n,i,o,c,l)=>{let y,d,u;const[p,T,v,A]=(a=>{const t=(a=>I(ya,w(a)?{storeTableName:a}:a??{}))(a),e=t[oa];if(t.mode==ia){const{storeTableName:a=s}=t;return[1,e,[a],k(a)]}const{tables:{load:n={},save:i={}}={},values:o={}}=t,c=E(M(I(wa,o)),0,P(wa)),r=c[2],l=k(r);return[0,e,[Ea(n,{[ra]:null,[ca]:f},ra,(a=>G(l,a)&&a==r)),Ea(i,{[la]:null,[ca]:f,deleteEmptyColumns:0,deleteEmptyTable:0},la,((a,t)=>G(l,t)&&t==r)),c],l]})(t);return(p?sa:na)(a,o?async(a,t)=>(o(a,t),await e(a,t)):e,(a=>{return[(t=async()=>{try{const t=(await e(da+ua))[0][ua],s=(await e(da+pa))[0][pa],n=(await e(m+" TOTAL_CHANGES() c"))[0].c;t==(y??=t)&&s==(d??=s)&&n==(u??=n)||(a(),y=t,d=s)}catch{}},s=T,t(),setInterval(t,1e3*s)),n((t=>A.has(t)?a():0))];var t,s}),(([a,t])=>{r(a),y=d=null,i(t)}),c,v,R(A),l)};a.createExpoSqliteNextPersister=(a,e,s,n,i)=>fa(a,s,(async(a,t=[])=>await e.allAsync(a,t)),(a=>t.addDatabaseChangeListener((({tableName:t})=>a(t)))),(a=>a.remove()),n,i,e)},"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("expo-sqlite/next")):"function"==typeof define&&define.amd?define(["exports","expo-sqlite/next"],t):t((a="undefined"!=typeof globalThis?globalThis:a||self).TinyBasePersisterExpoSqliteNext={},a["expo-sqlite/next"]);
