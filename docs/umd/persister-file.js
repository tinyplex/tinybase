var e,t;e=this,t=function(e,t,a){"use strict";const s=e=>typeof e,n=s(""),o="utf8",r=e=>null==e,i=(e,t,a)=>r(e)?a?.():t(e),c=Object,l=e=>c.getPrototypeOf(e),y=c.keys,f=c.freeze,p=e=>(e=>!r(e)&&i(l(e),(e=>e==c.prototype||r(l(e))),(()=>!0)))(e)&&0==(e=>y(e).length)(e),d=JSON.parse,u=e=>new Map(e),g=(e,t)=>e?.get(t),h=(e,t,a)=>{return r(a)?(s=e,n=t,s?.delete(n),e):e?.set(t,a);var s,n},w=(e,t,a)=>{var s,n;return s=e,n=t,s?.has(n)||h(e,t,a()),g(e,t)},v=u(),C=u(),b=e=>{return t=e?.[0],s(t)==n;var t};e.createFilePersister=(e,s,n)=>((e,t,a,s,n,o,c,[l,y]=[],d=[])=>{let u,A,M,S=0,m=0;w(v,d,(()=>0)),w(C,d,(()=>[]));const[F,L,T,O]=((e,t)=>r(t.getMergeableContent)?[0,t.getContent,t.getTransactionChanges,([e,t])=>!p(e)||!p(t)]:[1,t.getMergeableContent,t.getTransactionMergeableChanges,([,[[,e],[,t]]])=>!p(e)||!p(t)])(0,e),P=async e=>(2!=S&&(S=1,await x.schedule((async()=>{await e(),S=0}))),x),x={load:async(a,s)=>await P((async()=>{try{const a=await t();(F&&b(a)?e.setMergeableContent:e.setContent)(a)}catch{e.setContent([a,s])}})),startAutoLoad:async(a={},n={})=>(x.stopAutoLoad(),await x.load(a,n),m=1,M=s((async(a,s)=>{if(s){const t=s();await P((async()=>(F&&b(t)?e.applyMergeableChanges:e.applyChanges)(t)))}else await P((async()=>{try{const s=a?.()??await t();(F&&b(s)?e.setMergeableContent:e.setContent)(s)}catch(e){o?.(e)}}))})),x),stopAutoLoad:()=>(m&&(n(M),M=void 0,m=0),x),save:async e=>(1!=S&&(S=2,await x.schedule((async()=>{try{await a(L,e)}catch(e){o?.(e)}S=0}))),x),startAutoSave:async()=>(await x.stopAutoSave().save(),u=e.addDidFinishTransactionListener((()=>{const e=T();O(e)&&x.save((()=>e))})),x),stopAutoSave:()=>(i(u,e.delListener),u=void 0,x),schedule:async(...e)=>(((e,...t)=>{e.push(...t)})(g(C,d),...e),await(async()=>{if(!g(v,d)){for(h(v,d,1);!r((e=g(C,d),A=e.shift()));)try{await A()}catch(e){o?.(e)}h(v,d,0)}var e})(),x),getStore:()=>e,destroy:()=>x.stopAutoLoad().stopAutoSave(),getStats:()=>({})};return l&&(x[l]=()=>y),f(x)})(e,(async()=>d(await a.readFile(s,o))),(async e=>{return await a.writeFile(s,(t=e(),JSON.stringify(t,((e,t)=>t instanceof Map?c.fromEntries([...t]):t))),o);var t}),(e=>t.watch(s,(()=>e()))),(e=>e?.close()),n,0,["getFilePath",s])},"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("fs"),require("fs/promises")):"function"==typeof define&&define.amd?define(["exports","fs","fs/promises"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).TinyBasePersisterFile={},e.fs,e["fs/promises"]);
