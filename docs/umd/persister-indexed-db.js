var e,t;e=this,t=function(e){"use strict";const t=Promise,a=clearInterval,s=e=>null==e,n=(e,t,a)=>s(e)?a?.():t(e),o=e=>new t(e),r=async e=>t.all(e),c=(e,t)=>e.map(t),i=(e,...t)=>e.push(...t),d=Object,y=e=>d.getPrototypeOf(e),l=d.entries,u=d.keys,p=d.freeze,w=e=>(e=>!s(e)&&n(y(e),(e=>e==d.prototype||s(y(e))),(()=>!0)))(e)&&0==(e=>u(e).length)(e),h=e=>new Map(e),g=(e,t)=>e?.get(t),v=(e,t,a)=>{return s(a)?(n=e,o=t,n?.delete(o),e):e?.set(t,a);var n,o},f=(e,t,a,s)=>{var n,o;return n=e,o=t,n?.has(o)||v(e,t,a()),g(e,t)},b=h(),A=h(),S=globalThis.window,x=["t","v"],C={keyPath:"k"},D=async(e,t)=>{const a=((t,a)=>c(l(t),(([t,a])=>L(e,"put",{k:t,v:a}))))(t);c(await L(e,"getAllKeys"),(s=>((e,t)=>t in e)(t,s)?0:i(a,L(e,"delete",s)))),await r(a)},L=async(e,t,a)=>o(((s,n)=>{const o=e[t](a);o.onsuccess=()=>s(o.result),o.onerror=()=>n(`objectStore.${t} error`)}));e.createIndexedDbPersister=(e,t,y=1,l)=>{const u=async(e,a=[],s=0)=>o(((n,o)=>{const i=(S?S.indexedDB:indexedDB).open(t,s?2:void 0);i.onupgradeneeded=()=>s&&c(x,(e=>{try{i.result.createObjectStore(e,C)}catch{}})),i.onsuccess=async()=>{try{const t=i.result.transaction(x,"readwrite"),s=await r(c(x,(async(s,n)=>await e(t.objectStore(s),a[n]))));i.result.close(),n(s)}catch(e){i.result.close(),o(e)}},i.onerror=()=>o("indexedDB.open error")}));return((e,t,a,o,r,c,d,y={},l=[])=>{let u,h,S,x=0;f(b,l,(()=>0)),f(A,l,(()=>[]));const[C,D,L,j,m]=((e,t)=>[0,t.getContent,t.getTransactionChanges,([e,t])=>!w(e)||!w(t),t.setContent])(0,e),T=async e=>(2!=x&&(x=1,await P.schedule((async()=>{await e(),x=0}))),P),k=t=>{var a;(C&&(a=t?.[0],Array.isArray(a))?1===t?.[2]?e.applyMergeableChanges:e.setMergeableContent:1===t?.[2]?e.applyChanges:e.setContent)(t)},P={load:async e=>await T((async()=>{try{k(await t())}catch(t){c?.(t),e&&m(e)}})),startAutoLoad:async e=>(await P.stopAutoLoad().load(e),h=o((async(e,a)=>{const s=a?.();await T((async()=>{try{k(s??e?.()??await t())}catch(e){c?.(e)}}))})),P),stopAutoLoad:()=>(h&&(r(h),h=void 0),P),isAutoLoading:()=>!s(h),save:async e=>(1!=x&&(x=2,await P.schedule((async()=>{try{await a(D,e)}catch(e){c?.(e)}x=0}))),P),startAutoSave:async()=>(await P.stopAutoSave().save(),S=e.addDidFinishTransactionListener((()=>{const e=L();j(e)&&P.save((()=>e))})),P),stopAutoSave:()=>(n(S,e.delListener),S=void 0,P),isAutoSaving:()=>!s(S),schedule:async(...e)=>(i(g(A,l),...e),await(async()=>{if(!g(b,l)){for(v(b,l,1);!s((e=g(A,l),u=e.shift()));)try{await u()}catch(e){c?.(e)}v(b,l,0)}var e})(),P),getStore:()=>e,destroy:()=>P.stopAutoLoad().stopAutoSave(),getStats:()=>({}),...y};return p(P)})(e,(async()=>await u((async e=>((e=[])=>d.fromEntries(e))(c(await L(e,"getAll"),(({k:e,v:t})=>[e,t])))))),(async e=>await u((async(e,t)=>await D(e,t)),e(),1)),(e=>setInterval(e,1e3*y)),(e=>a(e)),l,0,{getDbName:()=>t})},e.objectStoreMatch=D},"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).TinyBasePersisterIndexedDb={});
