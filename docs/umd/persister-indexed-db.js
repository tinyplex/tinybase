var e,t;e=this,t=function(e){"use strict";const t=e=>typeof e,a=t(""),s=Promise,n=clearInterval,o=e=>null==e,r=(e,t,a)=>o(e)?a?.():t(e),c=e=>new s(e),i=async e=>s.all(e),d=(e,t)=>e.map(t),y=(e,...t)=>e.push(...t),l=Object,u=e=>l.getPrototypeOf(e),p=l.entries,w=l.keys,h=l.freeze,g=e=>(e=>!o(e)&&r(u(e),(e=>e==l.prototype||o(u(e))),(()=>!0)))(e)&&0==(e=>w(e).length)(e),v=e=>new Map(e),f=(e,t)=>e?.get(t),b=(e,t,a)=>{return o(a)?(s=e,n=t,s?.delete(n),e):e?.set(t,a);var s,n},A=(e,t,a,s)=>{var n,o;return n=e,o=t,n?.has(o)||b(e,t,a()),f(e,t)},S=v(),x=v(),C=globalThis.window,D=["t","v"],L={keyPath:"k"},j=async(e,t)=>{const a=((t,a)=>d(p(t),(([t,a])=>m(e,"put",{k:t,v:a}))))(t);d(await m(e,"getAllKeys"),(s=>((e,t)=>t in e)(t,s)?0:y(a,m(e,"delete",s)))),await i(a)},m=async(e,t,a)=>c(((s,n)=>{const o=e[t](a);o.onsuccess=()=>s(o.result),o.onerror=()=>n(`objectStore.${t} error`)}));e.createIndexedDbPersister=(e,s,u=1,p)=>{const w=async(e,t=[],a=0)=>c(((n,o)=>{const r=(C?C.indexedDB:indexedDB).open(s,a?2:void 0);r.onupgradeneeded=()=>a&&d(D,(e=>{try{r.result.createObjectStore(e,L)}catch{}})),r.onsuccess=async()=>{try{const a=r.result.transaction(D,"readwrite"),s=await i(d(D,(async(s,n)=>await e(a.objectStore(s),t[n]))));r.result.close(),n(s)}catch(e){r.result.close(),o(e)}},r.onerror=()=>o("indexedDB.open error")}));return((e,s,n,c,i,d,l,u={},p=[])=>{let w,v,C,D=0;A(S,p,(()=>0)),A(x,p,(()=>[]));const[L,j,m,T,k]=((e,t)=>[0,t.getContent,t.getTransactionChanges,([e,t])=>!g(e)||!g(t),t.setContent])(0,e),P=async e=>(2!=D&&(D=1,await I.schedule((async()=>{await e(),D=0}))),I),B=s=>{var n;(L&&(n=s?.[0],t(n)==a)?1===s?.[1][2]?e.applyMergeableChanges:e.setMergeableContent:1===s?.[2]?e.applyChanges:e.setContent)(s)},I={load:async e=>await P((async()=>{try{B(await s())}catch(t){d?.(t),e&&k(e)}})),startAutoLoad:async e=>(await I.stopAutoLoad().load(e),v=c((async(e,t)=>{const a=t?.();await P((async()=>{try{B(a??e?.()??await s())}catch(e){d?.(e)}}))})),I),stopAutoLoad:()=>(v&&(i(v),v=void 0),I),isAutoLoading:()=>!o(v),save:async e=>(1!=D&&(D=2,await I.schedule((async()=>{try{await n(j,e)}catch(e){d?.(e)}D=0}))),I),startAutoSave:async()=>(await I.stopAutoSave().save(),C=e.addDidFinishTransactionListener((()=>{const e=m();T(e)&&I.save((()=>e))})),I),stopAutoSave:()=>(r(C,e.delListener),C=void 0,I),isAutoSaving:()=>!o(C),schedule:async(...e)=>(y(f(x,p),...e),await(async()=>{if(!f(S,p)){for(b(S,p,1);!o((e=f(x,p),w=e.shift()));)try{await w()}catch(e){d?.(e)}b(S,p,0)}var e})(),I),getStore:()=>e,destroy:()=>I.stopAutoLoad().stopAutoSave(),getStats:()=>({}),...u};return h(I)})(e,(async()=>await w((async e=>((e=[])=>l.fromEntries(e))(d(await m(e,"getAll"),(({k:e,v:t})=>[e,t])))))),(async e=>await w((async(e,t)=>await j(e,t)),e(),1)),(e=>setInterval(e,1e3*u)),(e=>n(e)),p,0,{getDbName:()=>s})},e.objectStoreMatch=j},"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).TinyBasePersisterIndexedDb={});
