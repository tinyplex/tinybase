var t,e;t=this,e=function(t){"use strict";const e=t=>typeof t,a=e(""),s=t=>null==t,n=(t,e,a)=>s(t)?a?.():e(t),o=Object,i=t=>o.getPrototypeOf(t),r=o.keys,c=o.freeze,y=t=>(t=>!s(t)&&n(i(t),(t=>t==o.prototype||s(i(t))),(()=>!0)))(t)&&0==(t=>r(t).length)(t),d=t=>new Map(t),u=(t,e)=>t?.get(e),l=(t,e,a)=>{return s(a)?(n=t,o=e,n?.delete(o),t):t?.set(e,a);var n,o},g=(t,e,a,s)=>{var n,o;return n=t,o=e,n?.has(o)||l(t,e,a()),u(t,e)},p=d(),h=d();t.createCustomPersister=(t,o,i,r,d,f,v,w={},C=[])=>{let A,b,L,S=0;g(p,C,(()=>0)),g(h,C,(()=>[]));const[M,T,m,x]=((t,e)=>!t||s(e.getMergeableContent)?[0,e.getContent,e.getTransactionChanges,([t,e])=>!y(t)||!y(e)]:[1,e.getMergeableContent,e.getTransactionMergeableChanges,([,[[,t],[,e]]])=>!y(t)||!y(e)])(v,t),P=async t=>(2!=S&&(S=1,await O.schedule((async()=>{await t(),S=0}))),O),j=s=>{var n;(M&&(n=s?.[0],e(n)==a)?1===s?.[1][2]?t.applyMergeableChanges:t.setMergeableContent:1===s?.[2]?t.applyChanges:t.setContent)(s)},O={load:async(e,a)=>await P((async()=>{try{j(await o())}catch(s){f?.(s),t.setContent([e,a])}})),startAutoLoad:async(t={},e={})=>(await O.stopAutoLoad().load(t,e),b=r((async(t,e)=>{const a=e?.();await P((async()=>{try{j(a??t?.()??await o())}catch(t){f?.(t)}}))})),O),stopAutoLoad:()=>(b&&(d(b),b=void 0),O),isAutoLoading:()=>!s(b),save:async t=>(1!=S&&(S=2,await O.schedule((async()=>{try{await i(T,t)}catch(t){f?.(t)}S=0}))),O),startAutoSave:async()=>(await O.stopAutoSave().save(),L=t.addDidFinishTransactionListener((()=>{const t=m();x(t)&&O.save((()=>t))})),O),stopAutoSave:()=>(n(L,t.delListener),L=void 0,O),isAutoSaving:()=>!s(L),schedule:async(...t)=>(((t,...e)=>{t.push(...e)})(u(h,C),...t),await(async()=>{if(!u(p,C)){for(l(p,C,1);!s((t=u(h,C),A=t.shift()));)try{await A()}catch(t){f?.(t)}l(p,C,0)}var t})(),O),getStore:()=>t,destroy:()=>O.stopAutoLoad().stopAutoSave(),getStats:()=>({}),...w};return c(O)}},"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).TinyBasePersisters={});
